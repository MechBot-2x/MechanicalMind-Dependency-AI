name: Mantenimiento y Monitoreo Avanzado de Runners
on:
  schedule:
    - cron: '0 3 * * *'  # Ejecución diaria a las 3 AM UTC
  workflow_dispatch:     # Permite ejecución manual

jobs:
  cleanup:
    name: Limpieza Avanzada de Runners
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Limpiar runners offline
        uses: actions/cleanup-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          remove-token: ${{ secrets.GITHUB_TOKEN }}
          exclude-running: true
          min-age-days: 1
          dry-run: false

      - name: Terminar workflows obsoletos
        uses: ./.github/actions/cancel-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          hours: 48  # Cancela workflows con más de 24 horas

  health-check:
    name: Verificación de Salud Completa
    needs: cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Verificar recursos del sistema
        run: |
          # Script mejorado con manejo de errores
          echo "::group::Estado del Sistema"
          echo "Fecha: $(date)"
          echo "Versión del Runner: ${{ runner.version }}"
          echo "Sistema Operativo: ${{ runner.os }}"
          echo "::endgroup::"

          echo "::group::Uso de Disco"
          df -h || echo "Error al verificar disco"
          echo "::endgroup::"

          echo "::group::Memoria"
          free -m || echo "Error al verificar memoria"
          echo "::endgroup::"

          echo "::group::CPU"
          (nproc && lscpu | grep "Model name") || echo "Error al verificar CPU"
          echo "::endgroup::"

      - name: Verificar estado de GitHub Actions
        run: |
          echo "::group::Estado del Servicio GitHub"
          curl -s https://www.githubstatus.com/api/v2/summary.json | \
            jq -r '.components[] | select(.name == "Actions") | "Status: \(.status)\nUpdated: \(.updated_at)"' || \
            echo "Error al verificar estado de GitHub"
          echo "::endgroup::"

      - name: Verificar conexión con GitHub
        run: |
          echo "::group::Prueba de Conexión"
          curl -I https://api.github.com | grep HTTP || echo "Error en la conexión"
          echo "::endgroup::"

      - name: Notificar estado
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { data: runners } = await github.rest.actions.listSelfHostedRunnersForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const offlineRunners = runners.runners.filter(r => r.status === 'offline');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Mantenimiento completado\n` +
                    `Runners totales: ${runners.runners.length}\n` +
                    `Runners offline: ${offlineRunners.length}`
            });
