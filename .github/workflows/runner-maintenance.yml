name: Mantenimiento y Monitoreo Avanzado de Runners
on:
  schedule:
    - cron: '0 3 * * *'  # Ejecución diaria a las 3 AM UTC
  workflow_dispatch:     # Permite ejecución manual

# Configuración de permisos a nivel de workflow (más seguro)
permissions:
  actions: write
  checks: read
  contents: read
  issues: write  # Para comentarios de estado

jobs:
  cleanup:
    name: Limpieza Avanzada de Runners
    runs-on: ubuntu-latest
    
    # Permisos específicos del job (sobreescriben los del workflow si es necesario)
    permissions:
      actions: write
      issues: write
    
    steps:
      - name: Limpiar runners offline
        uses: actions/cleanup-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          remove-token: ${{ secrets.GITHUB_TOKEN }}
          exclude-running: true
          min-age-days: 1
          dry-run: false
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terminar workflows obsoletos
        uses: ./.github/actions/cancel-workflows
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          hours: 48
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  health-check:
    name: Verificación de Salud Completa
    needs: cleanup
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      checks: read
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar entorno
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Verificar recursos del sistema
        run: |
          echo "::group::Estado del Sistema"
          echo "Runner: ${{ runner.name }}"
          echo "OS: ${{ runner.os }}"
          echo "Arch: ${{ runner.arch }}"
          echo "::endgroup::"

          echo "::group::Uso de Disco"
          df -h || echo "Error al verificar disco"
          echo "::endgroup::"

          echo "::group::Memoria"
          free -m || echo "Error al verificar memoria"
          echo "::endgroup::"

          echo "::group::CPU"
          (nproc && lscpu | grep "Model name") || echo "Error al verificar CPU"
          echo "::endgroup::"

      - name: Verificar estado de GitHub Actions
        run: |
          echo "::group::Estado del Servicio GitHub"
          curl -s https://www.githubstatus.com/api/v2/summary.json | \
            jq -r '.components[] | select(.name == "Actions") | "Status: \(.status)\nUpdated: \(.updated_at)"' || \
            echo "Error al verificar estado de GitHub"
          echo "::endgroup::"

      - name: Verificar conexión con GitHub
        run: |
          echo "::group::Prueba de Conexión"
          curl -I https://api.github.com | grep HTTP || echo "Error en la conexión"
          echo "::endgroup::"

      - name: Notificar estado
        if: always()
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            try {
              const { data: runners } = await github.rest.actions.listSelfHostedRunnersForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const offlineRunners = runners.runners.filter(r => r.status === 'offline');
              const status = process.env.STATUS || '✅';

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `${status} Mantenimiento completado\n` +
                      `• Runners totales: ${runners.runners.length}\n` +
                      `• Runners offline: ${offlineRunners.length}\n` +
                      `• [Ver detalles](${github.server_url}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });
            } catch (error) {
              core.error(`Error al notificar estado: ${error}`);
            }

  security-scan:
    name: Escaneo de Seguridad
    needs: health-check
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
    
    steps:
      - name: Escanear runners para vulnerabilidades
        uses: github/codeql-action/analyze@v2
        with:
          category: "runner-security"
          token: ${{ secrets.GITHUB_TOKEN }}
